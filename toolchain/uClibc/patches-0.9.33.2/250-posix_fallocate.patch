Add posix_fallocate / posix_fallocate64 support (EXPERIMENTAL)

 MIPS platform only, for now.

---
 include/fcntl.h                               |    4 --
 libc/sysdeps/linux/common/Makefile.in         |    3 +
 libc/sysdeps/linux/common/posix_fallocate.c   |   35 ++++++++++++++++++++
 libc/sysdeps/linux/common/posix_fallocate64.c |   45 ++++++++++++++++++++++++++
 libc/sysdeps/linux/mips/Makefile.arch         |    2 -
 libc/sysdeps/linux/mips/posix_fallocate.c     |   37 +++++++++++++++++++++
 libc/sysdeps/linux/mips/posix_fallocate64.c   |   41 +++++++++++++++++++++++
 7 files changed, 162 insertions(+), 5 deletions(-)

diff -uBp a/include/fcntl.h b/include/fcntl.h
--- a/include/fcntl.h  2011-06-08 23:35:20.000000000 +0400
+++ b/include/fcntl.h	2011-10-02 13:59:44.000000000 +0400
@@ -210,9 +202,7 @@ extern int posix_fadvise64 (int __fd, __
 
 #endif
 
-#if 0 /* && defined __UCLIBC_HAS_ADVANCED_REALTIME__ */
-
-/* FIXME -- uClibc should probably implement these... */
+#if defined __UCLIBC_HAS_ADVANCED_REALTIME__
 
 /* Reserve storage for the data of the file associated with FD.
 
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/common/Makefile.in uClibc-0.9.32/libc/sysdeps/linux/common/Makefile.in
--- uClibc-0.9.32.orig/libc/sysdeps/linux/common/Makefile.in	2011-10-02 09:55:25.000000000 +0400
+++ uClibc-0.9.32/libc/sysdeps/linux/common/Makefile.in	2011-10-02 15:06:05.000000000 +0400
@@ -46,7 +46,8 @@ CSRC-$(UCLIBC_HAS_REALTIME) += clock_get
 	sched_get_priority_max.c sched_get_priority_min.c sched_getscheduler.c \
 	sched_rr_get_interval.c sched_setparam.c sched_setscheduler.c sigqueue.c
 # clock_getcpuclockid|clock_nanosleep|mq_timedreceive|mq_timedsend|posix_fadvise|posix_fallocate|posix_madvise|posix_memalign|posix_mem_offset|posix_spawnattr_destroy|posix_spawnattr_init|posix_spawnattr_getflags|posix_spawnattr_setflags|posix_spawnattr_getpgroup|posix_spawnattr_setpgroup|posix_spawnattr_getschedparam|posix_spawnattr_setschedparam|posix_spawnattr_getschedpolicy|posix_spawnattr_setschedpolicy|posix_spawnattr_getsigdefault|posix_spawnattr_setsigdefault|posix_spawnattr_getsigmask|posix_spawnattr_setsigmask|posix_spawnattr_init|posix_spawnattr_setflags|posix_spawnattr_setpgroup|posix_spawnattr_setschedparam|posix_spawnattr_setschedpolicy|posix_spawnattr_setsigdefault|posix_spawnattr_setsigmask|posix_spawn_file_actions_addclose|posix_spawn_file_actions_addopen|posix_spawn_file_actions_adddup2|posix_spawn_file_actions_addopen|posix_spawn_file_actions_destroy|posix_spawn_file_actions_init|posix_spawn_file_actions_init|posix_spawn|posix_spawnp|posix_spawnp|posix_typed_mem_get_info|pthread_mutex_timedlock|sem_timedwait
-CSRC-$(UCLIBC_HAS_ADVANCED_REALTIME) += posix_fadvise64.c posix_fadvise.c
+CSRC-$(UCLIBC_HAS_ADVANCED_REALTIME) += posix_fadvise64.c posix_fadvise.c \
+	 posix_fallocate.c posix_fallocate64.c
 CSRC-$(UCLIBC_SUSV4_LEGACY) += utime.c
 CSRC-$(UCLIBC_HAS_EPOLL) += epoll.c
 CSRC-$(UCLIBC_HAS_XATTR) += xattr.c
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/common/posix_fallocate64.c uClibc-0.9.32/libc/sysdeps/linux/common/posix_fallocate64.c
--- uClibc-0.9.32.orig/libc/sysdeps/linux/common/posix_fallocate64.c	1970-01-01 03:00:00.000000000 +0300
+++ uClibc-0.9.32/libc/sysdeps/linux/common/posix_fallocate64.c	2011-10-02 15:37:13.000000000 +0400
@@ -0,0 +1,45 @@
+/* vi: set sw=4 ts=4: */
+/*
+ * posix_fallocate64() for uClibc
+ * http://www.opengroup.org/onlinepubs/009695399/functions/posix_fallocate.html
+ *
+ * Copyright (C) 2000-2006 Erik Andersen <andersen@uclibc.org>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <features.h>
+#include <unistd.h>
+#include <errno.h>
+#include <endian.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
+
+#ifdef __UCLIBC_HAS_LFS__
+
+#ifdef __NR_fallocate
+int posix_fallocate64(int fd, __off64_t offset, __off64_t len)
+{
+  if (len != (off_t) len)
+    return EOVERFLOW;
+  INTERNAL_SYSCALL_DECL (err);
+    int ret = INTERNAL_SYSCALL (fallocate, err, 6, fd, 0,
+								__LONG_LONG_PAIR ((long int) (offset >> 32),
+												  (long int) offset),
+								__LONG_LONG_PAIR ((long int) (len >> 32),
+												  (long int) len));
+  if (!INTERNAL_SYSCALL_ERROR_P (ret, err))
+    return 0;
+  return INTERNAL_SYSCALL_ERRNO (ret, err);
+}
+
+#elif defined __UCLIBC_HAS_STUBS__
+int posix_fallocate64(int fd attribute_unused, off64_t offset attribute_unused, off64_t len attribute_unused)
+{
+	return ENOSYS;
+}
+#endif /* __NR_fallocate */
+
+#endif /* __UCLIBC_HAS_LFS__ */
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/common/posix_fallocate.c uClibc-0.9.32/libc/sysdeps/linux/common/posix_fallocate.c
--- uClibc-0.9.32.orig/libc/sysdeps/linux/common/posix_fallocate.c	1970-01-01 03:00:00.000000000 +0300
+++ uClibc-0.9.32/libc/sysdeps/linux/common/posix_fallocate.c	2011-10-02 15:30:30.000000000 +0400
@@ -0,0 +1,35 @@
+/* vi: set sw=4 ts=4: */
+/*
+ * posix_fallocate() for uClibc
+ * http://www.opengroup.org/onlinepubs/009695399/functions/posix_fallocate.html
+ *
+ * Copyright (C) 2000-2006 Erik Andersen <andersen@uclibc.org>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <sys/syscall.h>
+#include <fcntl.h>
+
+#ifndef __USE_FILE_OFFSET64
+
+#ifdef __NR_fallocate
+int posix_fallocate(int fd, off_t offset, off_t len)
+{
+	INTERNAL_SYSCALL_DECL(err);
+	int ret = (int) (INTERNAL_SYSCALL(fallocate, err, 6, fd, 0,
+					__LONG_LONG_PAIR (offset >> 31, offset),
+					__LONG_LONG_PAIR (len >> 31, len)));
+    if (INTERNAL_SYSCALL_ERROR_P (ret, err))
+      return INTERNAL_SYSCALL_ERRNO (ret, err);
+    return 0;
+}
+
+#elif defined __UCLIBC_HAS_STUBS__
+int posix_fallocate(int fd attribute_unused, off_t offset attribute_unused, off_t len attribute_unused)
+{
+	return ENOSYS;
+}
+#endif
+
+#endif /* !__USE_FILE_OFFSET64 */
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/mips/Makefile.arch uClibc-0.9.32/libc/sysdeps/linux/mips/Makefile.arch
--- uClibc-0.9.32.orig/libc/sysdeps/linux/mips/Makefile.arch	2011-06-08 23:35:20.000000000 +0400
+++ uClibc-0.9.32/libc/sysdeps/linux/mips/Makefile.arch	2011-10-02 15:04:37.000000000 +0400
@@ -13,7 +13,7 @@ CSRC := \
 SSRC := bsd-_setjmp.S bsd-setjmp.S setjmp.S syscall.S pipe.S syscall_error.S
 
 ifeq ($(UCLIBC_HAS_ADVANCED_REALTIME),y)
-CSRC += posix_fadvise.c posix_fadvise64.c
+CSRC += posix_fadvise.c posix_fadvise64.c posix_fallocate.c posix_fallocate64.c
 endif
 
 ifneq ($(UCLIBC_HAS_THREADS_NATIVE),y)
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/mips/posix_fallocate64.c uClibc-0.9.32/libc/sysdeps/linux/mips/posix_fallocate64.c
--- uClibc-0.9.32.orig/libc/sysdeps/linux/mips/posix_fallocate64.c	1970-01-01 03:00:00.000000000 +0300
+++ uClibc-0.9.32/libc/sysdeps/linux/mips/posix_fallocate64.c	2011-10-02 18:03:47.000000000 +0400
@@ -0,0 +1,41 @@
+/* vi: set sw=4 ts=4: */
+/*
+ * posix_fallocate64() for MIPS uClibc
+ * http://www.opengroup.org/onlinepubs/009695399/functions/posix_fallocate.html
+ *
+ * Copyright (C) 2000-2006 Erik Andersen <andersen@uclibc.org>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <features.h>
+#include <unistd.h>
+#include <errno.h>
+#include <endian.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
+
+#ifdef __UCLIBC_HAS_LFS__
+
+int posix_fallocate64(int fd, __off64_t offset, __off64_t len)
+{
+#ifdef __NR_fallocate
+	INTERNAL_SYSCALL_DECL(err);
+# if _MIPS_SIM == _MIPS_SIM_ABI32
+	int ret = INTERNAL_SYSCALL(fallocate, err, 6, fd, 0,
+		__LONG_LONG_PAIR ((long) (offset >> 32), (long) offset),
+		__LONG_LONG_PAIR ((long) (len >> 32), (long) len));
+# else /* N32 || N64 */
+	int ret = INTERNAL_SYSCALL(fallocate, err, 4, fd, 0, offset, len);
+# endif
+	if (INTERNAL_SYSCALL_ERROR_P (ret, err))
+		return INTERNAL_SYSCALL_ERRNO (ret, err);
+	return 0;
+#else
+	return ENOSYS;
+#endif
+}
+
+#endif /* __UCLIBC_HAS_LFS__ */
diff -urNBp uClibc-0.9.32.orig/libc/sysdeps/linux/mips/posix_fallocate.c uClibc-0.9.32/libc/sysdeps/linux/mips/posix_fallocate.c
--- uClibc-0.9.32.orig/libc/sysdeps/linux/mips/posix_fallocate.c	1970-01-01 03:00:00.000000000 +0300
+++ uClibc-0.9.32/libc/sysdeps/linux/mips/posix_fallocate.c	2011-10-02 17:58:54.000000000 +0400
@@ -0,0 +1,37 @@
+/* vi: set sw=4 ts=4: */
+/*
+ * posix_fallocate() for MIPS uClibc
+ * http://www.opengroup.org/onlinepubs/009695399/functions/posix_fallocate.html
+ *
+ * Copyright (C) 2000-2006 Erik Andersen <andersen@uclibc.org>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <features.h>
+#include <unistd.h>
+#include <errno.h>
+#include <endian.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
+
+int posix_fallocate(int fd, off_t offset, off_t len)
+{
+#ifdef __NR_fallocate
+	INTERNAL_SYSCALL_DECL(err);
+# if _MIPS_SIM == _ABIO32
+	int ret = INTERNAL_SYSCALL(fallocate, err, 6, fd, 0,
+		__LONG_LONG_PAIR ((long) (offset >> 31), (long) offset),
+		__LONG_LONG_PAIR ((long) (len >> 31), (long) len));
+# else /* N32 || N64 */
+	int ret = INTERNAL_SYSCALL(fallocate, err, 4, fd, offset, len);
+# endif
+	if (INTERNAL_SYSCALL_ERROR_P (ret, err))
+		return INTERNAL_SYSCALL_ERRNO (ret, err);
+	return 0;
+#else
+	return ENOSYS;
+#endif
+}
-- 
